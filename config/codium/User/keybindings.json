// Place your key bindings in this file to override the defaults
[
  // //system copy and paste
  // {
  //   "key": "shift+space y",
  //   "command": "editor.action.clipboardCopyAction",
  //   "when": "editorTextFocus"
  // },
  // {
  //   "key": "shift+space p",
  //   "command": "editor.action.clipboardPasteAction",
  //   "when": "editorTextFocus"
  // },
  // //focus related keybinds
  // {
  //   "key": "shift+space e n",
  //   "command": "workbench.action.nextEditor"
  // },
  // {
  //   "key": "shift+space e p",
  //   "command": "workbench.action.previousEditor"
  // },

  // {
  //   "key": "shift+space f e",
  //   "command": "workbench.action.focusActiveEditorGroup",
  //   "when": "!editorFocus"
  // },
  // {
  //   "key": "shift+space f s",
  //   "command": "workbench.action.focusSideBar"
  // },
  // {
  //   "key": "shift+space f f",
  //   "command": "workbench.files.action.focusFilesExplorer"
  // },
  // {
  //   "key": "shift+space f t",
  //   "command": "workbench.action.terminal.focus"
  // },

  // {
  //   "key": "shift+space f w",
  //   "command": "workbench.action.findInFiles"
  // },
  // {
  //   "key": "shift+space f r",
  //   "command": "workbench.action.replaceInFiles"
  // },
  // {
  //   "key": "shift+space f d",
  //   "command": "editor.action.formatDocument"
  // },
  // {
  //   "key": "shift+space f k",
  //   "command": "workbench.action.openGlobalKeybindings"
  // },
  // {
  //   "key": "shift+space v",
  //   "command": "workbench.action.openView"
  // },

  // //Close related keybinds
  // {
  //   "key": "shift+space c e c",
  //   "command": "workbench.action.closeActiveEditor"
  // },
  // {
  //   "key": "shift+space c e a",
  //   "command": "workbench.action.closeAllEditors"
  // },
  // {
  //   "key": "shift+space c e o",
  //   "command": "workbench.action.closeOtherEditors"
  // },
  // {
  //   "key": "shift+space c e l",
  //   "command": "workbench.action.closeEditorsToTheLeft"
  // },
  // {
  //   "key": "shift+space c e r",
  //   "command": "workbench.action.closeEditorsToTheRight"
  // },
  // {
  //   "key": "shift+space c t c",
  //   "command": "workbench.action.terminal.killViewOrEditor"
  // },

  // {
  //   "key": "shift+space r f",
  //   "command": "renameFile"
  // },
  // {
  //   "key": "shift+space r e",
  //   "command": "editor.action.rename"
  // },
  // {
  //   "key": "shift+space s a",
  //   "command": "saveAll"
  // },
  // {
  //   "key": "shift+space t s",
  //   "command": "editor.action.triggerSuggest",
  //   "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  // },
  // {
  //   "key": "shift+space q f",
  //   "command": "editor.action.quickFix",
  //   "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  // },
  // {
  //   "key": "shift+space v p",
  //   "command": "workbench.actions.view.problems"
  // },
  // {
  //   "key": "shift+space space",
  //   "command": "workbench.action.showCommands"
  // },
  // {
  //   "key": "shift+space t n",
  //   "command": "workbench.action.terminal.new"
  // },
  // {
  //   "key": "shift+space t t",
  //   "command": "workbench.action.terminal.toggleTerminal"
  // },

  // {
  //   "key": "shift+space 1",
  //   "command": "workbench.action.openEditorAtIndex1"
  // },
  // {
  //   "key": "shift+space 2",
  //   "command": "workbench.action.openEditorAtIndex2"
  // },
  // {
  //   "key": "shift+space 3",
  //   "command": "workbench.action.openEditorAtIndex3"
  // },
  // {
  //   "key": "shift+space 4",
  //   "command": "workbench.action.openEditorAtIndex4"
  // },
  // {
  //   "key": "shift+space 5",
  //   "command": "workbench.action.openEditorAtIndex5"
  // },
  // {
  //   "key": "shift+space 6",
  //   "command": "workbench.action.openEditorAtIndex6"
  // },
  // {
  //   "key": "shift+space 7",
  //   "command": "workbench.action.openEditorAtIndex7"
  // },
  // {
  //   "key": "shift+space 8",
  //   "command": "workbench.action.openEditorAtIndex8"
  // },
  // {
  //   "key": "shift+space 9",
  //   "command": "workbench.action.openEditorAtIndex9"
  // },
  // {
  //   "key": "shift+space shift+6",
  //   "command": "workbench.action.firstEditorInGroup"
  // },
  // {
  //   "key": "shift+space shift+4",
  //   "command": "workbench.action.lastEditorInGroup"
  // },

  // {
  //   "key": "shift+space ;",
  //   "command": "workbench.action.quickOpen"
  // },
  // {
  //   "key": "shift+space h",
  //   "command": "workbench.action.navigateLeft"
  // },
  // {
  //   "key": "shift+space l",
  //   "command": "workbench.action.navigateRight"
  // },
  // {
  //   "key": "shift+space j",
  //   "command": "workbench.action.navigateDown"
  // },
  // {
  //   "key": "shift+space k",
  //   "command": "workbench.action.navigateUp"
  // },

  // //file explorer
  // {
  //   "command": "explorer.newFile",
  //   "key": "a",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "shift+a",
  //   "command": "explorer.newFolder",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "command": "renameFile",
  //   "key": "r",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "command": "filesExplorer.copy",
  //   "key": "y",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "command": "filesExplorer.paste",
  //   "key": "p",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "command": "deleteFile",
  //   "key": "d",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "s",
  //   "command": "explorer.openToSide",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "x",
  //   "command": "filesExplorer.cut",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "enter",
  //   "command": "explorer.openAndPassFocus",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus"
  // },
  // {
  //   "key": "enter",
  //   "command": "list.toggleExpand",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus"
  // },

  //Font Zoom keybinds
  {
    "key": "ctrl+0",
    "command": "workbench.action.terminal.fontZoomReset",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+=",
    "command": "workbench.action.terminal.fontZoomIn",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.terminal.fontZoomOut",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+0",
    "command": "editor.action.fontZoomReset",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+=",
    "command": "editor.action.fontZoomIn",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+-",
    "command": "editor.action.fontZoomOut",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.zoomReset",
    "when": "!editorFocus"
  },
  {
    "key": "ctrl+=",
    "command": "workbench.action.zoomIn",
    "when": "!editorFocus"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.zoomOut",
    "when": "!editorFocus"
  },

  //Vim and LSP Related

  {
    "key": "shift-j",
    "command": "editor.action.moveLinesDownAction",
    "when": "vim.mode == 'VisualLine' && editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift-k",
    "command": "editor.action.moveLinesUpAction",
    "when": "vim.mode == 'VisualLine' && editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift-k",
    "command": "editor.action.showHover",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+j",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+j",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+k",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+k",
    "command": "search.action.focusSearchFromResults",
    "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+i",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+p",
    "command": "editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+u",
    "command": "editor.action.pageUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.pageDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "l",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "h",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "ctrl+d",
    "command": "notebook.cell.cursorPageDown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "ctrl+d",
    "command": "list.focusPageDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+d",
    "command": "quickInput.pageNext",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+d",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+d",
    "command": "workbench.action.interactivePlayground.pageDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "ctrl+u",
    "command": "notebook.cell.cursorPageUp",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "ctrl+u",
    "command": "list.focusPageUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+u",
    "command": "quickInput.pagePrevious",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+u",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+u",
    "command": "workbench.action.interactivePlayground.pageUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "ctrl+j",
    "command": "widgetNavigation.focusNext",
    "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'"
  },
  {
    "key": "ctrl+k",
    "command": "widgetNavigation.focusPrevious",
    "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'"
  },
  {
    "key": "ctrl+j",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "-editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "-deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "o",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
  }
]
